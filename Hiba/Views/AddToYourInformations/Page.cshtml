@model Hiba.Models.AddToYourInformation
@{
    ViewData["Title"] = "Heba";

    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<!-- Basic -->

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <!-- Mobile Metas -->
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <!-- Site Metas -->
    <title>Perfect - Responsive HTML5 Template</title>
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/css/site.css" />
    <link href="/css/animate.css" rel="stylesheet" />
    <link href="/css/custom.css" rel="stylesheet" />
    <link href="/css/flashy.min.css" rel="stylesheet" />
    <link href="/css/flaticon.css" rel="stylesheet" />
    <link href="/css/font-awesome.min.css" rel="stylesheet" />
    <link href="/css/magnific-popup.css" rel="stylesheet" />
    <link href="/css/pogo-slider.min.css" rel="stylesheet" />
    <link href="/css/responsive.css" rel="stylesheet" />
    <link href="/css/responsiveslides.css" rel="stylesheet" />
    <link href="/css/style.css" rel="stylesheet" />
    <link href="/css/timeline.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <!-- Site Icons -->
    <!--<link rel="shortcut icon" href="#" type="image/x-icon" />
    <link rel="apple-touch-icon" href="#" />-->
    <!-- Bootstrap CSS -->
    <!--<link rel="stylesheet" href="css/bootstrap.min.css" />-->
    <!-- Pogo Slider CSS -->
    <!--<link rel="stylesheet" href="css/pogo-slider.min.css" />-->
    <!-- Site CSS -->
    <!--<link rel="stylesheet" href="css/style.css" />-->
    <!-- Responsive CSS -->
    <!--<link rel="stylesheet" href="css/responsive.css" />-->
    <!-- Custom CSS -->
    <!--<link rel="stylesheet" href="css/custom.css" />-->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <style>
        .carousel,
        .carousel-inner,
        .carousel-inner > .item {
            overflow: hidden;
        }

            .carousel-inner:before {
                position: absolute;
                top: 0;
                bottom: 0;
                right: 82%;
                left: 0;
                content: "";
                display: block;
                background-color: #fff;
                z-index: 2;
            }

            .carousel-inner:after {
                position: absolute;
                top: 0;
                bottom: 0;
                right: 0;
                left: 82%;
                content: "";
                display: block;
                background-color: #fff;
                z-index: 2;
            }

        .carousel-control.left, .carousel-control.right {
            background: initial;
            width: 30%;
            color: #000;
            z-index: 10;
            top: -10px;
        }
    </style>
    <script>

        $(document).ready(function () {
            $('#myCarousel').carousel({
                interval: 4000
            })
            $('.carousel .item').each(function () {
                var next = $(this).next();
                if (!next.length) {
                    next = $(this).siblings(':first');
                }
                next.children(':first-child').clone().appendTo($(this));
                if (next.next().length > 0) {
                    next.next().children(':first-child').clone().appendTo($(this));
                } else {
                    $(this).siblings(':first').children(':first-child').clone().appendTo($(this));
                }
            });
        });
    </script>
</head>

<body id="inner_page" data-spy="scroll" data-target="#navbar-wd" data-offset="98">

    <!-- LOADER -->
    <div id="preloader">
        <div class="loader">
            <img src="~/images/loader.gif" alt="#" />
        </div>
    </div>
    <!-- end loader -->
    <!-- END LOADER -->
    <!-- Start header -->
    <!-- End header -->
    <!-- section -->
    @if (Model != null)
    {
        <section class="inner_banner">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="full">
                            <h3>@Model.Name</h3>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- end section -->
        <!-- section -->
        <div class="section margin-top_50">
            <div class="container">
                <div class="row">
                    <div class="col-md-6 layout_padding_2">
                        <div class="full">
                            <div style="float:@ViewBag.align" class="heading_main text_align_left">
                                <h2><span>@ViewBag.Title1</span> @ViewBag.Title2</h2>
                            </div>
                            <div class="full">
                                <p>
                                    @Html.Raw(Model.Text)
                                </p>
                            </div>
                            @*<div class="full">
                                    <a class="hvr-radial-out button-theme" href="#">About more</a>
                                </div>*@
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="full">
                            <img src="@Model.Image" alt="#" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- section -->
<div class="container">
    <h2>Releated Information</h2>
    <div id="myCarousel" class="carousel slide" data-ride="carousel">
        <!-- Indicators -->
        @{
            var data = Model.AddToYourInformationTag.AddToYourInformations.Where(a=>a.ID!=Model.ID).ToList();
        }
        <ol class="carousel-indicators">
            @for (int i = 0; i < data.Count; i++)
            {
                @if (i == 0)
                {
                    <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                }
                else
                {
                    <li data-target="#myCarousel" data-slide-to="@i"></li>
                }

            }
        </ol>

            <!-- Wrapper for slides -->
            <div class="carousel-inner">


                @for (int i = 0; i < data.Count; i++)
                {
                    @if (i == 0)
                    {
                        <div class="item active">
                            <a asp-action="Page"  asp-route-id="@data[i].ID">
                                <img src="@data[i].Image" alt="Los Angeles" style="width:100%;">
                            </a>
                            <div class="carousel-caption">
                                <h3>@data[i].Name</h3>                           
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="item">
                            <img src="@data[i].Image" alt="Los Angeles" style="width:300px;height:300px">
                            <div class="carousel-caption">
                                <h3>@data[i].Name</h3>
                            </div>
                        </div>

                    }
                }
            </div>

            <!-- Left and right controls -->
            <a class="left carousel-control" href="#myCarousel" data-slide="prev">
                <span class="glyphicon glyphicon-chevron-left"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="right carousel-control" href="#myCarousel" data-slide="next">
                <span class="glyphicon glyphicon-chevron-right"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
</div>
        <!-- end section -->
        @*@foreach (var item in Model.AddToYourInformationTag.AddToYourInformations.ToList())
        {
            <div>@item.Name </div>
        }*@
    }
    <script src="js/jquery.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <!-- ALL PLUGINS -->
    <script src="js/jquery.magnific-popup.min.js"></script>
    <script src="js/jquery.pogo-slider.min.js"></script>
    <script src="js/slider-index.js"></script>
    <script src="js/smoothscroll.js"></script>
    <script src="js/form-validator.min.js"></script>
    <script src="js/contact-form-script.js"></script>
    <script src="js/isotope.min.js"></script>
    <script src="js/images-loded.min.js"></script>
    <script src="js/custom.js"></script>
    <script>
        $('.carousel').carousel()
    </script>
    @*<script>
        /* counter js */

        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the target numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });
    </script>*@
</body>

</html>